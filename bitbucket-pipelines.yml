# <<<<<<< MoneyMan573/BuckosBits/bucksbitties
# =======
# <<<<<<< master
# >>>>>>> master
### This is a basic workflow to help you get started with Actions

#name: "bitbucket-pipelines.yml"

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:MoneyMan573/bucksbitties
  push:bitbucket-pipelines.yml
    branches: [ main1 ]
  pull_request:BuckosBits/bucksbitties-pipelines-main.yml
    branches: [ main1 ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
# <<<<<<< MoneyMan573/BuckosBits/bucksbitties
# =======
#=======
README.md
Bitbucket Pipelines Pipe: SonarCloud scan
Scan your code with SonarCloud to detects bugs, vulnerabilities and code smells in more than 25 programming languages.

Your SonarCloud account must first be associated to your Bitbucket team or user account. SonarCloud is totally free for open-source projects.
If your code is closed source, SonarCloud also offers a paid plan to run private analyses.

NOTE: For projects using Maven or Gradle please execute a respective scanner directly instead of using this pipe (see examples).

YAML Definition
Add the following snippet to the script section of your bitbucket-pipelines.yml file:

- pipe: sonarsource/sonarcloud-scan:1.2.2
  variables:
  SONAR_TOKEN: '<string>'  # Optional
  EXTRA_ARGS: '<string>'  # Optional
  SONAR_SCANNER_OPTS: '<string>'  # Optional
  DEBUG: '<boolean>'  # Optional
Variables
Variable	Usage
SONAR_TOKEN (*)	SonarCloud token. It is recommended to use a secure repository or account variable. 
And in this case there is no need to specify this variable in the bitbucket-pipelines.yml file.
EXTRA_ARGS	Extra analysis parameters (check docs)
SONAR_SCANNER_OPTS	Scanner JVM options (e.g. "-Xmx256m")
DEBUG	Turn on extra debug information. Default: true.
(*) = required variable.

Details
This pipe encapsulates the execution of SonarCloud code analyzer in order to detect bugs, 
vulnerabilities and code smells. 
SonarCloud can then decorate your Pull Requests and report back with code quality information. 
Getting started guide available here: Get started with Bitbucket Cloud.

Prerequisites
To use this pipe you have to set up a project on SonarCloud, then use the generated token in a secure variable named SONAR_TOKEN 
on your repository or team/personal Bitbucket Account.

Examples
Basic example:

- pipe: sonarsource/sonarcloud-scan:1.2.2
A bit more advanced example:

- pipe: sonarsource/sonarcloud-scan:1.2.2
  variables:
    EXTRA_ARGS: -Dsonar.projectDescription=\"Project with sonarcloud-scan pipe\" -Dsonar.eslint.reportPaths=\"report.json\"
    SONAR_SCANNER_OPTS: -Xmx512m
    DEBUG: "true"
This example uses a custom description of the project on SonarCloud, reads the report produced by eslint, sets maximum memory to 512MB, 
and enables verbose output.

Support
If you would like help with this pipe, or you have an issue or feature request, let us know on our community forum.

If you are reporting an issue, please include:

the version of the pipe
relevant logs and error messages
steps to reproduce
# >>>>>>> BigGuy573/bucksbitties-pipelines.yml
# >>>>>>> master
